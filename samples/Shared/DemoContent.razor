@page "/"

<h1>Blazor Signature Pad</h1>
<h2 class="pl-5">by <img src="_content/Shared/mobsites-logo.png" width="42" height="42" />obsites</h2>
<br />
<div class="row mb-3">
    <div class="col col-sm-8 col-xl-4">
        <p>
            <b>
                NOTE: This demo component is set to keep state. Make some changes,
                reload the page, and see how the changes are maintained.
            </b>
        </p>
    </div>
</div>

<div class="row mb-3">
    <div class="col-12 col-xl-6 mb-3">
        <SignaturePad KeepState
                      Id="Demo"
                      Color="white"
                      @bind-BackgroundMode="BackgroundMode"
                      @bind-BackgroundColorDirection="BackgroundColorDirection"
                      @bind-BackgroundColorStart="BackgroundColorStart" 
                      @bind-BackgroundColorEnd="BackgroundColorEnd"
                      Image="_content/Shared/blazor.png" 
                      BackgroundImage="_content/Shared/hyades.jpg"
                      @ref="signaturePad" 
                      OnSignatureChange="OnSignatureChange">
            <SignaturePadFooter FooterDirective="Sign above">
                <SignaturePadPen Image="_content/Shared/pen.png" />
                <SignaturePadClear Image="_content/Shared/clear.png" />
                <SignaturePadUndo Image="_content/Shared/undo.png" />
                <SignaturePadSave Image="_content/Shared/save.png" SaveAsType="signatureType" />
            </SignaturePadFooter>
        </SignaturePad>
    </div>
    <div class="col-12 col-xl-6 mb-3">
        <h6><b>Below the data url is captured in real-time using SignaturePad callback event:</b></h6>
        <select @onchange="OnSignatureChange">
            <option value="@SignaturePad.SupportedSaveAsTypes.png">PNG</option>
            <option value="@SignaturePad.SupportedSaveAsTypes.jpg">JPEG</option>
            <option value="@SignaturePad.SupportedSaveAsTypes.svg">SVG</option>
        </select>
        <textarea rows="10" class="w-100" readonly>@dataURL</textarea>
    </div>
</div>
<div class="row mb-3">
    <div class="col-12 col-xl-6 mb-3">
        <b>Background:</b>
        <div class="pt-2 pl-4">
            <div class="form-group form-check">
                <input 
                    checked=@(BackgroundMode == BackgroundModes.Dark)
                    type="radio" class="form-check-input" 
                    id="dark-mode" 
                    @onchange="@((e) => BackgroundMode = BackgroundModes.Dark)" />
                <label class="form-check-label" for="dark-mode">Dark Mode</label>
            </div>
            <div class="form-group form-check">
                <input 
                    checked=@(BackgroundMode == BackgroundModes.Light)
                    type="radio" class="form-check-input" 
                    id="light-mode" 
                    @onchange="@((e) => BackgroundMode = BackgroundModes.Light)" />
                <label class="form-check-label" for="light-mode">Light Mode</label>
            </div>
            <div class="form-group form-check">
                <input 
                    checked=@(BackgroundMode == BackgroundModes.Image) 
                    type="radio" 
                    class="form-check-input" 
                    id="use-background-image" 
                    @onchange="@((e) => BackgroundMode = BackgroundModes.Image)" />
                <label class="form-check-label" for="use-background-image">Use Background Image</label>
            </div>
            <div class="form-group form-check">
                <input 
                    checked=@(BackgroundMode == BackgroundModes.Gradient)
                    type="radio" 
                    class="form-check-input" 
                    id="use-background-color" 
                    @onchange="@((e) => BackgroundMode = BackgroundModes.Gradient)" />
                <label class="form-check-label" for="use-background-color">Use Background Color</label>
            </div>
            <div class="form-group">
                <label for="top-app-bar-type">Direction</label>
                <select 
                    class="form-control" 
                    id="top-app-bar-type" 
                    @oninput="@((e) => BackgroundColorDirection = (BackgroundColorDirections)Enum.Parse(typeof(BackgroundColorDirections), e.Value as string))">
                    <option value="@BackgroundColorDirections.TopToBottom" selected=@(BackgroundColorDirection == BackgroundColorDirections.TopToBottom ? true : false)>Top To Bottom</option>
                    <option value="@BackgroundColorDirections.BottomToTop" selected=@(BackgroundColorDirection == BackgroundColorDirections.BottomToTop ? true : false)>Bottom To Top</option>
                    <option value="@BackgroundColorDirections.LeftToRight" selected=@(BackgroundColorDirection == BackgroundColorDirections.LeftToRight ? true : false)>Left To Right</option>
                    <option value="@BackgroundColorDirections.RightToLeft" selected=@(BackgroundColorDirection == BackgroundColorDirections.RightToLeft ? true : false)>Right To Left</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col col-sm-8 col-xl-4">
                <div class="form-group pl-4">
                    <label for="start-color">Start Color (name, rgb, or hex)</label>
                    <input 
                        class="form-control" 
                        id="start-color" 
                        type="text" 
                        value="@BackgroundColorStart" 
                        @onchange="@((e) => BackgroundColorStart = e.Value as string)"/>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col col-sm-8 col-xl-4">
                <div class="form-group pl-4">
                    <label for="end-color">End Color (name, rgb, or hex)</label>
                    <input 
                        class="form-control" 
                        id="end-color" 
                        type="text" 
                        value="@BackgroundColorEnd" 
                        @onchange="@((e) => BackgroundColorEnd = e.Value as string)"/>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12 col-xl-6 mb-3">
        <p>
            <b>
                * <small><i>This demonstrates the use of this component 
                without a dependency on any of our other components. 
                We, of course, recommend using this component in conjunction with our other components 
                as they work seamlessly together and can benefit one another, 
                not to mention there are often less css adjustments to incorporate.
                But if you want to go solo, check out the source code for this demo</i> 
                <a target="_blank" href="https://github.com/Mobsites/Blazor.SignaturePad/tree/master/samples">here</a>
                as one approach.</small>
            </b>
        </p>
    </div>
</div>

@code {
    SignaturePad signaturePad;
    SignaturePad.SupportedSaveAsTypes signatureType;
    string dataURL;

    private async Task OnSignatureChange(ChangeEventArgs eventArgs)
    {
        if (eventArgs?.Value != null)
        {
            signatureType = (SignaturePad.SupportedSaveAsTypes)Enum.Parse(typeof(SignaturePad.SupportedSaveAsTypes), eventArgs.Value as string);
        }

        dataURL = await signaturePad.ToDataURL(signatureType);
    }

    private BackgroundModes backgroundMode = BackgroundModes.Gradient;
    public BackgroundModes BackgroundMode
    {
        get => backgroundMode; 
        set
        {
            backgroundMode = value;
            StateHasChanged();
        }
    }

    private BackgroundColorDirections backgroundColorDirection = BackgroundColorDirections.TopToBottom;
    public BackgroundColorDirections BackgroundColorDirection
    {
        get => backgroundColorDirection;
        set 
        {
            backgroundColorDirection = value;
            StateHasChanged();
        }
    }

    private string backgroundColorStart = "rgb(5, 39, 103)";
    public string BackgroundColorStart
    {
        get => backgroundColorStart;
        set 
        {
            backgroundColorStart = value;
            StateHasChanged();
        }
    }

    private string backgroundColorEnd = "#3a0647";
    public string BackgroundColorEnd
    {
        get => backgroundColorEnd;
        set 
        {
            backgroundColorEnd = value;
            StateHasChanged();
        }
    }
}