@page "/"
@inject HttpClient Http

<DemoContent />

<MatDialog @bind-IsOpen="@dialogIsOpen">
    <MatDialogContent>
        <SignaturePad @ref="signature"
            UsedInModal 
            MinWidth="300"
            MinHeight="300">
            <SignaturePadFooter FooterDirective="@("Sign Please")" />
        </SignaturePad>  
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(() => signature.Clear())">Clear</MatButton>
        <MatButton OnClick="@(() => signature.Save(SignaturePad.SupportedSaveAsTypes.png))">Save</MatButton>
        <MatIconButton OnClick="@(e => { dialogIsOpen = false; })" Icon="@MatIconNames.Close"/>
    </MatDialogActions>
</MatDialog>
<MatButton OnClick="@(e => { dialogIsOpen = true; })" Class="mb-5">Open Signature Pad In Modal</MatButton>

<br />
@if (!string.IsNullOrEmpty(dataURL))
{
    <SignaturePad DataURL="@dataURL">
        <SignaturePadFooter FooterDirective="Sign above">
                <SignaturePadPen Image="_content/Shared/pen.png" />
                <SignaturePadClear Image="_content/Shared/clear.png" />
                <SignaturePadUndo Image="_content/Shared/undo.png" />
                <SignaturePadSave Image="_content/Shared/save.png" />
            </SignaturePadFooter>
    </SignaturePad> 
} 

@code
{
    bool dialogIsOpen = false;
    SignaturePad signature;

    string dataURL;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            dataURL = await Http.GetStringAsync("sample-data/dataURL.txt");
        }
        catch (System.Exception)
        {
            
        }
    }
}